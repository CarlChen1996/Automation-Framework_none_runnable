# The folder is used to store those programs related to core framework, such as: Host, Validator, Analyzer, etc.

# Code outline
    Controller.py
        run_with_manual_mode()
        run_with_auto_mode()
        keep_assemble_alive()
        keep_executor_alive()
        
        
    Analyzer.py
        class Analyzer
            load(self)
            generate(self, res_list)
            
            
    Assemble_engine.py
        class AssembleEngine(Engine)
            start(self)
            stop(self)
            start_thread(self)
            __fresh_queue_testplan(self)
            scan_folder()
            get_task_from_folder(self, file_list)
            generate_task(self, file_list)
            __fresh_queue_execution(self)
            send_task_to_execution(self)
            get_signal_after_send(self, task)
            __assemble(self)

    Configuration_engine.py
        class ConfigurationEngine(Engine)
            start(self, build_list=None, deploy_list=None)
            start_thread(self, send_con)
            stop(self)

    Configurator.py
        class Configurator
            config(self)

    Execution_engine.py
        class ExecutionEngine(Engine)
            start(self)
            stop(self)
            start_thread(self)
            __add_task_to_queue(self)
            insert_task_to_queue(self)
            __execute(self)
            __deploy(self)
            
    Engine.py
        class Engine:
            start(self)
            stop(self)

    Error_handler.py
        class ErrorHandler
            handle(self, error_code)
            exit(self)
            reset_framework(self)
            reset(self, engine)
            continue_work(self)

    Ftp_tools.py
        class FTPUtils
            get_list(self)
            is_ftp_file(self)
            download(self, localfile, remotefile)
            download_dir(self, local, remote)
            upload(self, localfile, remotefile)
            close(self)

    Host.py
        class Host
            start(self)
            reboot(self)
            shutdown(self)
            get_ip(self)
            get_hostname(self)
            get_version(self)
            get_mac(self)
            get_username(self)
            get_password(self)
            get_domain(self)
        
        class WindowsHost(Host)
        
        class LinuxHost(Host)
        
        class Build
            get_scripts(self, task)
            jenkins_build(self, task, target_os, ip, user_name, password, py_entry="run.py", output_name="run")
            get_os_type(self, task)
            build_task(self, task)
        
        class Deploy
            deploy_task(self, task)
        
        class Execute
            execute_task(self, task)
            check_status(self, task)
            collect_result(self, task)
            
        Class WindowsBuildHost(WindowsHost, Build)
        
        class WindowsDeployHost(WindowsHost, Deploy)
        
        class WindowsExecuteHost(WindowsHost, Execute)
        
        class LinuxBuild(LinuxHost, Build)

        class LinuxExecute(LinuxHost, Execute)

    Jenkins_class.py
        class OS_type

        timer(func)
            calculate(*args,**kwargs)

        class Jenkins_Server
            connect(self)
            build_job(self, job_name)
            get_job_list(self)
            get_last_build_number(self, job_name)
            get_build_result(self,job_name, last_build_number)
            create_job(self, new_job_name, new_job_config)
            process_config(self, config_file, repository, py_entry, output_name, remote_folder_name, build_node, job_os_type, mail_list)
            create_job_params(self, job_name, job_os_type, repository, py_entry, output_name, remote_folder_name, mail_list)
            remove_job(self, job_name)
            check_job_exists(self, job_name)

        class JOB
            creare_job(self)
            build_job(self)
            remove(self)

    Log.py
        class SafeLog(TimedRotatingFileHandler)
            shouldRollover(self, record)
            doRollover(self)
            getFilesToDelete(self)

        class Log
            screenshot(self,screenshot=False)
            addHandler(self, hdlr)
            removeHandler(self, hdlr)
            critical(self, msg, *args, **kwargs)
            warning(self, msg, *args, **kwargs)
            error(self, msg, *args, **kwargs)
            info(self, msg, *args, **kwargs)
            debug(self, msg, *args, **kwargs)
            log(self, level, msg,  *args, **kwargs)

    QTPutils.py
        class QTP_HPDM
            set_test_data(self, task)
            set_execute_data(self, host, task)
            __upload_test_data(self)
            __run_qtp_script(self, testPath)
            __create_filter(self)
            discover_devices(self, task)
            create_template(self)
            deploy_task(self, task, deploy_host)
            execute_task(self)
            get_result(self)
            
    Queue_task.py
        class Queue
            insert_task(self, index=0, task='')
            remove_task(self, task)
            set_order(self, index, task)
            clear(self)
            get_task_list(self)
            
        class AssembleQueue(Queue):
            assemble(self, task, host)
        
        class ExecuteQueue(Queue)
            deploy(self, task, host)
            execute(self, task)
            check_status(self, task)
            collect_result(self, task)
            
    Report.py
        class Report
            generate(self)
            __final_data(self)
            __final_data_2(self):
            __result(self)
            remove_report_folder(task_report_path)
            
        class Email
            zip_result_package(self, result_path, name)
            send(self)

    Script.py
        class Script
            get_status(self)
            set_status(self, status)
            get_name(self)

    Task.py
        class Task
            insert_script(self, script)
            get_script_list(self)
            insert_exe_file_list(self, file)
            get_exe_file_list(self)
            insert_uut_list(self, uut)
            get_uut_list(self)
            get_id(self)
            get_name(self)
            get_status(self)
            get_email(self)
            get_repository(self)
            set_status(self, status)
            get_state(self)
            set_state(self, state)
            build(self, host)
            get_scripts(self, host)
            execute(self):
            deploy(self, host)
            collect_result(self)
            terminate(self, host)
            get_execute_duration(self)
            validate_host(self, validator)
            validate_scripts(self, validator)
            
    Validator.py
        class Validator
            validate(self, name)
        
        Class HostValidator(Validator)
            validate(self, host)
            
        Class ScriptValidator(Validator)
            validate(self, task)
		
	
