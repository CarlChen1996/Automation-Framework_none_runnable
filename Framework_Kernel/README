# The folder is used to store those programs related to core framework, such as: Host, Validator, Analyzer, etc.

# Code outline
    Controller.py
        run_with_manual_mode()
        run_with_auto_mode()
        keep_assemble_alive()
        keep_executor_alive()
        
    Analyzer.py
        class Analyzer
            analyze_file(self, file)
            analyze_files_in_list(self, file_list)
            
    Assemble_engine.py
        class AssembleEngine(Engine)
            start(self)
            stop(self)
            start_thread(self)
            __fresh_queue_testplan(self)
            scan_folder()
            get_task_from_folder(self, file_list)
            generate_task(self, file_list)
            __fresh_queue_execution(self)
            send_task_to_execution(self)
            get_signal_after_send(self, task)
            __assemble(self)

    Configuration_engine.py
        class ConfigurationEngine(Engine)
            start(self)
            get_server_list(self)
            __initial_server(self, server_item)
            validate_server(self, server)
            run(self)
            stop(self)

    Execution_engine.py
        class ExecutionEngine(Engine)
            start(self)
            stop(self)
            start_thread(self)
            __add_task_to_queue(self)
            insert_task_to_queue(self)
            __execute(self)
            deploy(self, d, i)
            download_result()
            send_report(self, i)
            
    Engine.py
        class Engine:
            start(self)
            stop(self)

    Error_handler.py
        class ENGINE_CODE

        class ERROR_LEVEL

        class ERROR_MSG
            create_error_msg(self)

        class ErrorHandler
            handle(self, engine=None)
            terminate_framework(self)
            reset_framework(self)
            reset_engine(self, engine)
            rerun_task(self)
            drop_task(self)
            continue_task(self)

    Host.py
        class Host
            start(self)
            reboot(self)
            shutdown(self)
            get_ip(self)
            get_hostname(self)
            get_version(self)
            get_mac(self)
            get_username(self)
            get_password(self)
            get_domain(self)
        
        class WindowsHost(Host)
        
        class LinuxHost(Host)
        
        class Build
            get_scripts(self, task)
            jenkins_build(self, task)
            get_os_type(self, task)
            build_task(self, task)
            generate_scripts_config(self, task)
        
        class Deploy
            deploy_task(self, task)
        
        class Execute
            execute_task(self, task)
            check_status(self, task)
            collect_result(self, task)
            
        Class WindowsBuildHost(WindowsHost, Build)
        
        class WindowsDeployHost(WindowsHost, Deploy)
        
        class WindowsExecuteHost(WindowsHost, Execute)
        
        class LinuxBuildHost(LinuxHost, Build)

        class LinuxDeployHost(LinuxHost, Deploy)

        class LinuxExecuteHost(LinuxHost, Execute)

    Log.py
        class SafeLog(TimedRotatingFileHandler)
            shouldRollover(self, record)
            doRollover(self)
            getFilesToDelete(self)

        class Log
            screenshot(self, screenshot=False)
            addHandler(self, hdlr)
            removeHandler(self, hdlr)
            critical(self, msg, *args, **kwargs)
            warning(self, msg, *args, **kwargs)
            error(self, msg, *args, **kwargs)
            info(self, msg, *args, **kwargs)
            debug(self, msg, *args, **kwargs)
            log(self, level, msg,  *args, **kwargs)

    QTPutils.py
        class QTP_HPDM
            __load_config(self)
            set_test_data(self, task)
            __upload_test_data(self)
            __run_qtp_script(self, testPath)
            __create_filter(self)
            discover_devices(self, task)
            deploy_task(self, task, deploy_host)
            execute_task(self)
            get_result(self)
            
    Task_queue.py
        class Queue
            insert_task(self, index=0, task='')
            remove_task(self, task)
            set_order(self, index, task)
            clear(self)
            get_task_list(self)
            
        class AssembleQueue(Queue):
            assemble(self, task, host)
        
        class ExecuteQueue(Queue)
            deploy(self, task, host)
            execute(self, task)
            check_status(self, task)
            collect_result(self, task)
            
    Report.py
        class Report
            generate(self)
            __final_data(self)
            __final_data_2(self):
            __result(self)
            remove_report_folder(task_report_path)
            
        class Email
            zip_result_package(self, result_path, name)
            send(self)
            send_message(self,)

    Script.py
        class Script
            get_status(self)
            set_status(self, status)
            get_name(self)

    Task.py
        class Task
            insert_script(self, script)
            get_script_list(self)
            insert_exe_file_list(self, file)
            get_exe_file_list(self)
            insert_uut_list(self, uut)
            get_uut_list(self)
            get_id(self)
            get_name(self)
            get_status(self)
            get_email(self)
            get_repository(self)
            set_status(self, status)
            get_state(self)
            set_state(self, state)
            build(self, host)
            get_scripts(self, host)
            execute(self):
            deploy(self, host)
            collect_result(self)
            terminate(self, host)
            get_execute_duration(self)
            validate_host(self, validator)
            validate_scripts(self, validator)
            
    Validator.py
        class Validator
            validate(self, name)
            ping(self, ip)
        
        Class HostValidator(Validator)
            validate(self, host)
            validate_build_server(self, host)
            validate_deploy_server(self, host)
            validate_uut(self, host)
            validate_http(self)
            
        Class ScriptValidator(Validator)
            validate(self, task)
		
	
